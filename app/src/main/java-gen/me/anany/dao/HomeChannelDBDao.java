package me.anany.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import me.anany.bean.HomeChannelDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HomeChannelDB".
*/
public class HomeChannelDBDao extends AbstractDao<HomeChannelDB, Long> {

    public static final String TABLENAME = "HomeChannelDB";

    /**
     * Properties of entity HomeChannelDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "ID");
        public final static Property Channle_id = new Property(1, String.class, "channle_id", false, "CHANNLE_ID");
        public final static Property Is_use = new Property(2, String.class, "is_use", false, "IS_USE");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Pic = new Property(4, String.class, "pic", false, "PIC");
        public final static Property Sname = new Property(5, String.class, "sname", false, "SNAME");

        private Properties() {
        }
    };


    public HomeChannelDBDao(DaoConfig config) {
        super(config);
    }
    
    public HomeChannelDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HomeChannelDB\" (" + //
                "\"ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CHANNLE_ID\" TEXT," + // 1: channle_id
                "\"IS_USE\" TEXT," + // 2: is_use
                "\"NAME\" TEXT," + // 3: name
                "\"PIC\" TEXT," + // 4: pic
                "\"SNAME\" TEXT);"); // 5: sname
        // Add Indexes
        db.execSQL("CREATE INDEX " + constraint + "IDX_HomeChannelDB_ID ON HomeChannelDB" +
                " (\"ID\");");
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HomeChannelDB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HomeChannelDB entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String channle_id = entity.getChannle_id();
        if (channle_id != null) {
            stmt.bindString(2, channle_id);
        }
 
        String is_use = entity.getIs_use();
        if (is_use != null) {
            stmt.bindString(3, is_use);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String pic = entity.getPic();
        if (pic != null) {
            stmt.bindString(5, pic);
        }
 
        String sname = entity.getSname();
        if (sname != null) {
            stmt.bindString(6, sname);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HomeChannelDB readEntity(Cursor cursor, int offset) {
        HomeChannelDB entity = new HomeChannelDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // channle_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // is_use
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // pic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // sname
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HomeChannelDB entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setChannle_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIs_use(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSname(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HomeChannelDB entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HomeChannelDB entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
